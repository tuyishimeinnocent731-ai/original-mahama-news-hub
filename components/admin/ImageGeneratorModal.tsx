import React, { useState } from 'react';
import Modal from '../Modal';
import * as newsService from '../../services/newsService';
import { SparklesIcon } from '../icons/SparklesIcon';
import LoadingSpinner from '../LoadingSpinner';

interface ImageGeneratorModalProps {
    isOpen: boolean;
    onClose: () => void;
    onImageSelect: (base64Image: string) => void;
    initialPrompt?: string;
}

const ImageGeneratorModal: React.FC<ImageGeneratorModalProps> = ({ isOpen, onClose, onImageSelect, initialPrompt = '' }) => {
    const [prompt, setPrompt] = useState(initialPrompt);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const [generatedImage, setGeneratedImage] = useState<string | null>(null);

    const handleGenerate = async () => {
        if (!prompt) return;
        setIsLoading(true);
        setError('');
        setGeneratedImage(null);
        try {
            const image = await newsService.generateImageForArticle(prompt);
            setGeneratedImage(image);
        } catch (err: any) {
            setError(err.message || 'An unexpected error occurred.');
        } finally {
            setIsLoading(false);
        }
    };
    
    const handleUseImage = () => {
        if (generatedImage) {
            onImageSelect(generatedImage);
            onClose();
        }
    }

    return (
        <Modal isOpen={isOpen} onClose={onClose}>
            <div className="p-6">
                <h3 className="text-lg font-semibold flex items-center gap-2 mb-4">
                    <SparklesIcon /> AI Image Generator
                </h3>
                <div className="space-y-4">
                    <textarea
                        value={prompt}
                        onChange={(e) => setPrompt(e.target.value)}
                        placeholder="Describe the image you want to generate..."
                        rows={3}
                        className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
                    />
                    <button onClick={handleGenerate} disabled={isLoading} className="w-full px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 disabled:bg-muted font-semibold">
                        {isLoading ? 'Generating...' : 'Generate Image'}
                    </button>
                    {error && <p className="text-destructive text-sm text-center">{error}</p>}
                    
                    {isLoading && <div className="py-8"><LoadingSpinner /></div>}
                    
                    {generatedImage && (
                        <div className="space-y-4 text-center">
                             <img src={generatedImage} alt="Generated by AI" className="rounded-md w-full object-contain max-h-64" />
                             <button onClick={handleUseImage} className="px-5 py-2.5 bg-accent text-accent-foreground rounded-md hover:bg-accent/90 font-semibold">
                                Use This Image
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </Modal>
    );
};

export default ImageGeneratorModal;